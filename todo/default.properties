#(1) if possible, values are case insensitive (True=true=TRUE)
#(2) boolean variables: true, t, y, yes, 1 => TRUE, everything else => FALSE
#(3) the value \ must be encoded as \\

#possible values: replace, append
dest.file.writemode=REPLACE

#valid character sets are defined in java-class java.nio.charset.Charset
dest.file.encoding=ISO-8859-1

dest.file.csv.row_start=[[
dest.file.csv.row_end=]]
#everything else than YES is a NO
dest.file.csv.header=YES
dest.file.csv.delemiter=;
dest.file.csv.string_enclosed_by="
dest.file.csv.string_enclosed_escape=\\
dest.file.csv.null=[NULL]
#possible values (without "):"\n" (unix) or "\r\n" (windows). default or fallback:unix newline. note: "\" must be escaped with \
dest.file.csv.newline=\\n
#everything else than YES is a NO
dest.file.csv.newline_after_last_record=YES

dest.file.format.sql.bigint=.#####
dest.file.format.sql.decimal=.#####
dest.file.format.sql.double=.#####
dest.file.format.sql.float=.#####
dest.file.format.sql.integer=.#####
dest.file.format.sql.numeric=.#####
dest.file.format.sql.real=.#####
dest.file.format.sql.smallint=.#####
dest.file.format.sql.tinyint=.#####
dest.file.format.sql.bit.0=0
dest.file.format.sql.bit.1=1
dest.file.format.sql.boolean.true=TRUE
dest.file.format.sql.boolean.false=FALSE
dest.file.format.sql.array.startelem=<<
dest.file.format.sql.array.endelem=>>
#hex|uu|base64
dest.file.format.sql_binary=base64
#hex|uu|base64
dest.file.format.sql.blob=base64
#hex|uu|base64
dest.file.format.sql.object=base64
#hex|uu|base64
dest.file.format.sql.rowid=base64
#hex|uu|base64
dest.file.format.sql.longvarbinary=base64
#hex|uu|base64
dest.file.format.sql.varbinary=base64
# a pattern that is compatible with java.text.SimpleDateFormat
dest.file.format.sql.date=yyyy-MM-dd
dest.file.format.sql.time=h:mm a
dest.file.format.sql.timestamp=yyyy-MM-dd HH:mm:ss
dest.file.format.sql.time_with_timezone=HH:mm:ss z
dest.file.format.sql.timestamp_with_timezone=yyyy-MM-dd HH:mm:ss z
#unused java.sql.Types.{datalink,distinct,null,other,ref,ref_cursor,struct}
